{"version":3,"sources":["MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","console","log","url","this","props","movie","id","window","location","href","react_default","a","createElement","class","key","width","src","cover","alt","title","release_date","vote_average","overview","onClick","viewMovie","bind","value","React","Component","API_KEY","concat","process","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","term","searchHandler","assertThisInitialized","performSearch","_this2","urlString","$","ajax","success","searchResults","results","movieRows","forEach","poster_path","movieRow","src_MovieRow","push","setState","rows","error","xhr","status","err","event","target","onChange","placeholder","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4fa9cf2f.chunk.js","sourcesContent":["import React from 'react';\n\nclass MovieRow extends React.Component {\n    viewMovie() {\n        console.log('view movie');\n        const url = 'https://www.themoviedb.org/movie/' + this.props.movie.id;\n        window.location.href = url;\n    }\n    render() {\n        return <div class=\"container\">\n                    <div key={this.props.movie.id} class=\"row\"> \n                        <div class=\"col-md-3 mx-auto\">\n                            <img class=\"cover-img\" width=\"150\" src={this.props.movie.cover} alt=\"cover\"/>\n                        </div>\n                        <div class=\"col-md-8\">\n                            <h5 class=\"padding-title\">{this.props.movie.title}</h5>\n                            <h5>Date Released: {this.props.movie.release_date}</h5>\n                            <h5 class=\"text-padding\">Rating: {this.props.movie.vote_average}</h5>\n                            <p class=\"text-padding\">{this.props.movie.overview}</p>\n                            <button id=\"view\" onClick={this.viewMovie.bind(this)} value=\"view\">view</button>\n                        </div>\n                      \n                    </div>\n                </div>\n    }\n}\n\nexport default MovieRow;","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport MovieRow from './MovieRow';\nimport './App.css';\nconst API_KEY = `${process.env.REACT_APP_MOVIE_API_KEY}`\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {term: ''};\n    this.searchHandler = this.searchHandler.bind(this);\n    // console.log('yo');\n  \n    // const movies = [\n    //   {id: 0, cover: 'https://images-na.ssl-images-amazon.com/images/I/514K35AM3KL._SY445_.jpg', title: 'Repoman', year: 1984},\n    //   {id: 1, cover: 'https://m.media-amazon.com/images/M/MV5BMjI1MDk4NjE0OV5BMl5BanBnXkFtZTcwMjExODM5NA@@._V1_UY1200_CR84,0,630,1200_AL_.jpg', title: 'Tough Guys Don\\'t Dance', year: 1987}\n    // ];\n\n    \n    // let movieRows = [];\n    // movies.forEach((movie) => {\n    //   console.log(movie.id);\n    //   const movieRow = <MovieRow movie={movie} />\n    //   movieRows.push(<div key={movie.id}> {movieRow}</div>)\n    // })\n    // this.state = {rows: movieRows}\n  \n  this.performSearch();\n}\n\nperformSearch(term) {\n  console.log(\"perform search using moviedb\");\n  const urlString = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=` + term;\n  $.ajax({\n    url: urlString,\n    success: (searchResults) => {\n      console.log(\"fetched data successfully\");\n      console.log(searchResults);\n      const results = searchResults.results;\n      // console.log(results[0]);\n\n      let movieRows = [];\n\n      results.forEach((movie) => {\n        movie.cover = \"https://image.tmdb.org/t/p/w185\" + movie.poster_path;\n        console.log(movie.title);\n        const movieRow = <MovieRow key={movie.id} movie={movie}/>\n        movieRows.push(movieRow);\n      })\n      this.setState({rows: movieRows});\n    },\n    error: (xhr, status, err) => {\n      console.error(\"failed to fetch data\")\n    }\n  })\n}\n\nsearchHandler(event) {\n  const term = event.target.value;\n  this.performSearch(term);\n  this.setState({term: event.target.value});\n}\n\n\n  render() {\n    return (\n      <div>\n        <header class=\"header\">\n            <ul id=\"nav-items\">\n                <li><img width=\"80\" src=\"/green-image.png\" alt=\"logo\"/></li>\n                <li id=\"title\"><h1>MoviesDB Search</h1></li>\n            </ul>\n        </header>\n\n        <input id=\"input\" onChange={this.searchHandler} placeholder=\"enter search term\" value={this.state.term} />\n        {this.state.rows}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}